CREATE TABLE USERS
(
    USER_ID   NUMBER(10)    NOT NULL,
    USERNAME  VARCHAR2(10),
    PASSWORD  VARCHAR2(60),
    NAME      VARCHAR2(10)  NOT NULL,
    BIRTHDAY  DATE,
    PHONE     VARCHAR2(15),
    EMAIL     VARCHAR2(100) NOT NULL,
    ZIPCODE   VARCHAR2(5),
    ADDRESS1  VARCHAR2(255),
    ADDRESS2  VARCHAR2(255),
    GENDER    VARCHAR2(1),
    IS_ACTIVE VARCHAR2(1)   NOT NULL,
    IS_ADMIN  VARCHAR2(1)   NOT NULL,
    CONSTRAINT UK_USER_USERNAME UNIQUE (USERNAME)
);

CREATE TABLE CATEGORY
(
    CATEGORY_ID   NUMBER(10)    NOT NULL,
    CATEGORY_NAME VARCHAR2(100) NOT NULL,
    FILE_ID       NUMBER(10)    NOT NULL
);

CREATE TABLE MOIM
(
    MOIM_ID             NUMBER(10)    NOT NULL,
    MOIM_NAME           VARCHAR2(255) NOT NULL,
    MOIM_TYPE           VARCHAR2(1)   NOT NULL,
    MOIM_CONTENT        CLOB          NOT NULL,
    MOIM_ATTENDEE_COUNT NUMBER(3, 0)  NOT NULL,
    MOIM_ZIPCODE        VARCHAR2(5)   NOT NULL,
    MOIM_ADDRESS1       VARCHAR2(255) NOT NULL,
    MOIM_ADDRESS2       VARCHAR2(255) NOT NULL,
    MOIM_DATE           DATE          NOT NULL,
    MOIM_MONEY          NUMBER(7, 0)  NOT NULL,
    MOIM_AVG_RATE       NUMBER(2, 1)  NOT NULL,
    MOIM_HOST_INTRO     CLOB          NOT NULL,
    IS_VISIBLE          VARCHAR2(1)   NOT NULL,
    IS_ACTIVE           VARCHAR2(1)   NOT NULL,
    MOIM_COUNT          NUMBER(10)    NOT NULL,
    USER_ID             NUMBER(10)    NOT NULL,
    CATEGORY_ID         NUMBER(10)    NOT NULL,
    FILE_ID             NUMBER(10)
);

CREATE TABLE REVIEW
(
    REVIEW_ID      NUMBER(10)    NOT NULL,
    REVIEW_DATE    DATE          NOT NULL,
    REVIEW_TITLE   VARCHAR2(255) NOT NULL,
    REVIEW_CONTENT CLOB          NOT NULL,
    REVIEW_RATE    NUMBER(2, 0)  NOT NULL,
    MOIM_ID        NUMBER(10)    NOT NULL,
    FILE_ID        NUMBER(10),
    USER_ID        NUMBER(10)    NOT NULL
);

CREATE TABLE MOIM_ATTENDEE
(
    USER_ID  NUMBER(10) NOT NULL,
    MOIM_ID  NUMBER(10) NOT NULL,
    ATT_DATE DATE       NOT NULL
);

CREATE TABLE QUESTION
(
    QUES_ID      NUMBER(10) NOT NULL,
    QUES_CONTENT CLOB       NOT NULL,
    USER_ID      NUMBER(10) NOT NULL,
    MOIM_ID      NUMBER(10) NOT NULL
);

CREATE TABLE ANSWER
(
    ANS_ID      NUMBER(10) NOT NULL,
    ANS_CONTENT CLOB       NOT NULL,
    ANS_DATE    DATE       NOT NULL,
    QUES_ID     NUMBER(10) NOT NULL,
    USER_ID     NUMBER(10) NOT NULL
);

CREATE TABLE FILES
(
    FILE_ID      NUMBER(10)    NOT NULL,
    FILE_ORIGIN  VARCHAR2(255) NOT NULL,
    FILE_CONVERT VARCHAR2(255) NOT NULL
);

CREATE TABLE NOTICE
(
    NOTICE_ID      NUMBER(10)    NOT NULL,
    NOTICE_TITLE   VARCHAR2(255) NOT NULL,
    NOTICE_CONTENT CLOB          NOT NULL,
    NOTICE_DATE    DATE          NOT NULL,
    NOTICE_COUNT   NUMBER(10)    NOT NULL,
    FILE_ID        NUMBER(10)
);

ALTER TABLE USERS
    ADD CONSTRAINT PK_USER PRIMARY KEY (USER_ID);
ALTER TABLE CATEGORY
    ADD CONSTRAINT PK_CATEGORY PRIMARY KEY (CATEGORY_ID);
ALTER TABLE MOIM
    ADD CONSTRAINT PK_MOIM PRIMARY KEY (MOIM_ID);
ALTER TABLE REVIEW
    ADD CONSTRAINT PK_REVIEW PRIMARY KEY (REVIEW_ID);
ALTER TABLE MOIM_ATTENDEE
    ADD CONSTRAINT PK_MOIM_ATTENDEE PRIMARY KEY (USER_ID, MOIM_ID);
ALTER TABLE QUESTION
    ADD CONSTRAINT PK_QUESTION PRIMARY KEY (QUES_ID);
ALTER TABLE ANSWER
    ADD CONSTRAINT PK_ANSWER PRIMARY KEY (ANS_ID);
ALTER TABLE FILES
    ADD CONSTRAINT PK_FILE PRIMARY KEY (FILE_ID);

ALTER TABLE MOIM_ATTENDEE
    ADD CONSTRAINT FK_USER_TO_MOIM_ATTENDEE_1 FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID);
ALTER TABLE MOIM_ATTENDEE
    ADD CONSTRAINT FK_MOIM_TO_MOIM_ATTENDEE_1 FOREIGN KEY (MOIM_ID) REFERENCES MOIM (MOIM_ID);

ALTER TABLE CATEGORY
    ADD CONSTRAINT FK_CATEGORY_FILE FOREIGN KEY (FILE_ID) REFERENCES FILES (FILE_ID);
ALTER TABLE MOIM
    ADD CONSTRAINT FK_MOIM_FILE FOREIGN KEY (FILE_ID) REFERENCES FILES (FILE_ID);
ALTER TABLE MOIM
    ADD CONSTRAINT FK_MOIM_MEMBER FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID);
ALTER TABLE MOIM
    ADD CONSTRAINT FK_MOIM_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY (CATEGORY_ID);

ALTER TABLE REVIEW
    ADD CONSTRAINT FK_REVIEW_MOIM FOREIGN KEY (MOIM_ID) REFERENCES MOIM (MOIM_ID);
ALTER TABLE REVIEW
    ADD CONSTRAINT FK_REVIEW_FILE FOREIGN KEY (FILE_ID) REFERENCES FILES (FILE_ID);
ALTER TABLE REVIEW
    ADD CONSTRAINT FK_REVIEW_MEMBER FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID);

ALTER TABLE QUESTION
    ADD CONSTRAINT FK_QUESTION_MEMBER FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID);
ALTER TABLE QUESTION
    ADD CONSTRAINT FK_QUESTION_MOIM FOREIGN KEY (MOIM_ID) REFERENCES MOIM (MOIM_ID);
ALTER TABLE ANSWER
    ADD CONSTRAINT FK_ANSWER_QUESTION FOREIGN KEY (QUES_ID) REFERENCES QUESTION (QUES_ID);
ALTER TABLE ANSWER
    ADD CONSTRAINT FK_ANSWER_USER FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID);

ALTER TABLE NOTICE
    ADD CONSTRAINT FK_NOTICE_FILE FOREIGN KEY (FILE_ID) REFERENCES FILES (FILE_ID);

CREATE SEQUENCE SEQ_USER_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE OR REPLACE TRIGGER TRG_USER_ID
    BEFORE INSERT
    ON USERS
    FOR EACH ROW
    WHEN (NEW.USER_ID IS NULL)
BEGIN
    SELECT SEQ_USER_ID.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;

CREATE SEQUENCE SEQ_QUESTION_ID START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER TRG_QUESTION_ID
    BEFORE INSERT
    ON QUESTION
    FOR EACH ROW
    WHEN (NEW.QUES_ID IS NULL)
BEGIN
    SELECT SEQ_QUESTION_ID.NEXTVAL INTO :NEW.QUES_ID FROM DUAL;
END;

CREATE SEQUENCE SEQ_MOIM_ID START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER TRG_MOIM_ID
    BEFORE INSERT
    ON MOIM
    FOR EACH ROW
    WHEN (NEW.MOIM_ID IS NULL)
BEGIN
    SELECT SEQ_MOIM_ID.NEXTVAL INTO :NEW.MOIM_ID FROM DUAL;
END;

CREATE SEQUENCE SEQ_CATEGORY_ID START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER TRG_CATEGORY_ID
    BEFORE INSERT
    ON CATEGORY
    FOR EACH ROW
    WHEN (NEW.CATEGORY_ID IS NULL)
BEGIN
    SELECT SEQ_CATEGORY_ID.NEXTVAL INTO :NEW.CATEGORY_ID FROM DUAL;
END;

CREATE SEQUENCE SEQ_FILE_ID START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER TRG_FILE_ID
    BEFORE INSERT
    ON FILES
    FOR EACH ROW
    WHEN (NEW.FILE_ID IS NULL)
BEGIN
    SELECT SEQ_FILE_ID.NEXTVAL INTO :NEW.FILE_ID FROM DUAL;
END;

CREATE SEQUENCE SEQ_REVIEW_ID START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER TRG_REVIEW_ID
    BEFORE INSERT
    ON REVIEW
    FOR EACH ROW
    WHEN (NEW.REVIEW_ID IS NULL)
BEGIN
    SELECT SEQ_REVIEW_ID.NEXTVAL INTO :NEW.REVIEW_ID FROM DUAL;
END;

CREATE SEQUENCE SEQ_ANSWER_ID START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER TRG_ANSWER_ID
    BEFORE INSERT
    ON ANSWER
    FOR EACH ROW
    WHEN (NEW.ANS_ID IS NULL)
BEGIN
    SELECT SEQ_ANSWER_ID.NEXTVAL INTO :NEW.ANS_ID FROM DUAL;
END;

CREATE SEQUENCE SEQ_NOTICE_ID START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER TRG_NOTICE_ID
    BEFORE INSERT
    ON NOTICE
    FOR EACH ROW
    WHEN (NEW.NOTICE_ID IS NULL)
BEGIN
    SELECT SEQ_NOTICE_ID.NEXTVAL INTO :NEW.NOTICE_ID FROM DUAL;
END;